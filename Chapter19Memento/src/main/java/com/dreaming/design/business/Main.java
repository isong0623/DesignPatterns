package com.dreaming.design.business;

/**
 * 开发仿真系统
 *
 * 考虑这样一个仿真应用，功能是，模拟运行针对某个具体问题的多个解决方案，记录运行过程的各种数据，
 * 在模拟运行完成以后，方便对这多个解决方案进行比较和评价,从而选定最优的解决方案。
 *
 * 这种仿真系统，在很多领域都有应用，比如工作流系统，对同一问题制定多个流程，
 * 然后通过仿真运行，最后来确定最优的流程作为解决方案;在工业设计和制造领域，仿真系统的应用就更广泛了。
 * 由于都是解决同一个具体的问题，这多个解决方案并不是完全不一样的，假定它们的前半部分运行是完全一样的，
 * 只是在后半部分采用了不同的解决方案，后半部分需要使用前半部分运行所产生的数据。
 *
 * 由于要模拟运行多个解决方案，而且最后要根据运行结果来进行评价，这就意味着每个方案的后半部分的初始数据应该是一样的。
 * 也就是说在运行每个方案后半部分之前，要保证数据都是由前半部分运行所产生的数据。
 * 当然，这里并不具体地去深入到底有哪些解决方案,也不去深入到底有哪些状态数据，只是示意一下。
 *
 * 那么，这样的系统该如何实现呢?尤其是每个方案运行需要的初始数据应该一样，要如何来保证呢?
 */
public class Main {
    public static void main(String[] args) {
        //创建模拟运行流程的对象
        FlowAMock mock = new FlowAMock("TestFlow");
        //运行流程的第一个阶段
        mock.runPhaseOne();
        //得到第一个阶段运行所产生的数据,后面要用
        int tempResult = mock.getTempResult();
        String tempState = mock.getTempState();
        //按照方案一来运行流程后半部分
        mock.schema1();
        //把第一个阶段运行所产生的数据重新设置回去
        mock.setTempResult(tempResult);
        mock.setTempState(tempState);
        //按照方案二来运行流程后半部分
        mock.schema2();
    }

}
