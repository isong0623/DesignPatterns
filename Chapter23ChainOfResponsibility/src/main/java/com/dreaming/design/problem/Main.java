package com.dreaming.design.problem;

/**
 * 上面的实现很简单，基本上没有什么特别的难度。仔细想想，这么实现有没有问题呢?
 * 仔细分析申请聚餐费用的业务功能和目前的实现，主要面临着以下问题。
 *
 * 聚餐费用申请的处理流程是可能会变动的。
 * 比如现在的处理流程是:提交申请给项目经理，看看是否适合由项目经理处理，
 * 如果不是→看看是否适合由部门经理处理，如果不是→总经理处理的步骤。
 * 今后可能会变化成:直接提交给部门经理，看看是否适合由部门经理处理，
 * 如果不是→总经理处理这样的步骤。也就是说，
 * 对于聚餐费用申请，要求处理的逻辑步骤是灵活的。
 *
 * 各个处理环节的业务处理也是会变动的。
 * 因为处理流程可能发生变化，也会导致某些步骤具体的业务功能发生变化，
 * 比如，原本部门经理审批聚餐费用的时候，只是判断是否批准;现在，
 * 部门经理可能在审批聚餐费用的时候，核算本部门的实时成本，这就出现新的业务处理功能了。
 *
 * 采用上面的实现，如果处理的逻辑发生了变化，解决的方法，一个是生成一个子类，
 * 覆盖requestToProjectManager方法，然后在里面实现新的处理;
 * 另外一个方法就是修改处理申请方法的源代码来实现。要是具体处理环节的业务处理功能发生了变化，
 * 那就只好找到相应的处理方法，进行源代码修改了。
 *
 * 总之都不是什么好方法，也就是说，如果出现聚餐费用申请的处理流程变化的情况，
 * 或者是出现各个处理环节的功能变化的时候，
 * 上面的实现方式是很难灵活地变化来适应新功能的要求的。
 *
 *
 * 把上面的问题抽象一下:客户端发出一个请求，会有很多对象都可以来处理这个请求，
 * 而且不同对象的处理逻辑是不一样的。对于客户端而言，无所谓谁来处理，反正有对象处理就可以了。
 * 而且在上述处理中，还希望处理流程是可以灵活变动的，
 * 而处理请求的对象需要能方便地修改或者是被替换掉，以适应新的业务功能的需要。
 *
 * 请问如何才能实现上述要求?
 */
public class Main {
    public static void main(String[] args) {

    }
}
